#!/usr/bin/env bash

PW_PATH="$HOME/.pw"
IDENTITY_FILE_PATH="$PW_PATH/identity"
PW_EXTENSION="pw"

UPPERCASE='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
LOWERCASE='abcdefghijklmnopqrstuvwxyz'
NUMBERS='0123456789'
SYMBOLS='!@#$%^&*'
GEN_ALPHABET="$UPPERCASE$LOWERCASE$NUMBERS$SYMBOLS"
GEN_LENGTH=32

CMD=${1-"ls"}

function gen_pw() {
  GENERATED=""
  for i in $(seq 1 $GEN_LENGTH) ; do
    GENERATED="${GENERATED}${GEN_ALPHABET:RANDOM%${#GEN_ALPHABET}:1}"
  done
  echo "$GENERATED"
}

function decrypt() {
  echo "$(gpg --decrypt --quiet "$1")" | tr -d '\n'
}

function encrypt() {
  gpg --recipient "$1" --output "$3" --encrypt "$2"
}

function total_keys_with_identity() {
  gpg --list-keys --with-colons --quiet | grep "$1" | wc -l | xargs
}

# INITIAL CHECKS

# Ensure that the directory exists (create it if missing)
if [ ! -d "$PW_PATH" ]; then
  mkdir -p "$PW_PATH"
fi

# Load the identity from the file
if [ -e "$IDENTITY_FILE_PATH" ]; then
  IDENTITY=$(cat "$IDENTITY_FILE_PATH" | tr -d '\n')
elif [ "$CMD" == "init" ]; then
  read -p "Enter your email address: " email
    
  matching_keys=$(total_keys_with_identity "$email")
  if [ "$matching_keys" == "0" ]; then
    echo "Generating key..."
    TMP_FILE_PATH=$(mktemp)
    cat > "$TMP_FILE_PATH" <<EOF
Key-Type: RSA
Key-Length: 4096
Subkey-Type: RSA
Subkey-Length: 4096
Name-Real: pw
Name-Email: $email
Expire-Date: 0
%commit
EOF
    gpg --batch --pinentry-mode=ask --full-generate-key --quiet $TMP_FILE_PATH
    rm $TMP_FILE_PATH
  else
    echo "Key already exists. Skipping key generation"
  fi

  echo "Writing identity file $IDENTITY_FILE_PATH"
  echo "$email" > "$IDENTITY_FILE_PATH"
  echo "Initialisation complete"
  exit 0
else
  echo "Not yet initialised. Run 'pw init' to set up"
  exit 1
fi


# ONE ARG COMMANDS

if [ "$CMD" == "init" ]; then
  echo "Already initialized"
  exit 1
fi

if [ "$CMD" == "ls" ]; then
  for f in "$PW_PATH"/*; do
    if [ -f "$f" ]; then
      f="$(basename "$f")"
      ext="${f##*.}"
      if [ "$ext" == "$PW_EXTENSION" ]; then
        echo ${f%.*}
      fi
    fi
  done

  exit 0
fi

if [ "$CMD" == "gen" ]; then
  generated=$(gen_pw)
  echo "$generated"
  exit 0
fi

if [ "$CMD" == "gencp" ]; then
  generated=$(gen_pw)
  echo "$generated" | tr -d '\n' | pbcopy
  echo "Generated and copied to clipboard"
  exit 0
fi

# TWO ARG COMMANDS (name as the second argument)

NAME=$2
if [ -z "$NAME" ]; then
  echo "Usage: $0 $CMD <name>"
  exit 1
fi
PW_FILE_PATH="$PW_PATH/$NAME.$PW_EXTENSION"

if [ "$CMD" == "add" ]; then
  if [ -e "$PW_FILE_PATH" ]; then
    echo "$NAME already exists (path=$PW_FILE_PATH)"
    exit 1
  else
    # https://unit.stackexchange.com/questions/181937/how-to-create-a-temporary-file-in-shall-script
    TMP_FILE_PATH=$(mktemp)
    vim "$TMP_FILE_PATH"
    echo "$(cat "$TMP_FILE_PATH" | xargs)" > "$TMP_FILE_PATH"
    encrypt "$IDENTITY" "$TMP_FILE_PATH" "$PW_FILE_PATH"
    rm "$TMP_FILE_PATH"
    exit 0
  fi
fi

if [ "$CMD" == "edit" ]; then
  if [ -e "$PW_FILE_PATH" ]; then
    echo "... TODO ..."
    exit 0
  else
    echo "$NAME does not exist (path=$PW_FILE_PATH)"
    exit 1
  fi
fi

if [ "$CMD" == "cp" ]; then
  if [ -e "$PW_FILE_PATH" ]; then
    decrypt $PW_FILE_PATH | pbcopy
    echo "Copied to clipboard"
    exit 0
  else
    echo "$NAME does not exist (path=$PW_FILE_PATH)"
    exit 1
  fi
fi

if [ "$CMD" == "show" ]; then
  if [ -e "$PW_FILE_PATH" ]; then
    VALUE=$(decrypt $PW_FILE_PATH)
    echo "$VALUE"
    exit 0
  else
    echo "$NAME does not exist (path=$PW_FILE_PATH)"
    exit 1
  fi
fi

if [ "$CMD" == "rm" ]; then
  if [ -e "$PW_FILE_PATH" ]; then
    echo "Are you sure you want to delete $NAME? (Warning: this is not reversible)"
    read -p "> Enter DELETE to confirm (anything else will cancel): " confirm
    if [ "$confirm" == "DELETE" ]; then
      rm "$PW_FILE_PATH"
      echo "Deleted $NAME"
      exit 0
    else
      echo "Cancelled deletion of $NAME"
      exit 0
    fi
  else
    echo "$NAME does not exist (path-=$PW_FILE_PATH)"
    exit 1
  fi
fi


echo "Unrecgonised command: $CMD"
exit 1